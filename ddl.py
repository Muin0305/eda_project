import json
import pandas as pd
import duckdb
import os

DB_FILE = 'my.db'
EXCEL_FILE = 'source/california_mall.xlsx'  # –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Excel-—Ñ–∞–π–ª–∞
if not os.path.exists(EXCEL_FILE):
    raise FileNotFoundError(f"–§–∞–π–ª {EXCEL_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω!")

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏
with open('tables.json') as f:
    tables_dict = json.load(f)

def create_tables():
    """–°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—ã –∏–∑ SQL-—Å–∫—Ä–∏–ø—Ç–∞ –±–µ–∑ foreign key."""
    try:
        tables_query = """
        CREATE TABLE IF NOT EXISTS customer_data (
            customer_key VARCHAR(50) PRIMARY KEY,
            gender VARCHAR(20) NOT NULL,
            customer_age INTEGER NOT NULL,
            payment_type VARCHAR(50)
        );

        CREATE TABLE IF NOT EXISTS shopping_mall_data (
            mall_name VARCHAR(100) PRIMARY KEY,
            built_year INTEGER,
            total_area_sqm VARCHAR(50),
            city_location VARCHAR(50),
            total_stores INTEGER
        );

        CREATE TABLE IF NOT EXISTS sales_data (
            invoice_number VARCHAR(50) PRIMARY KEY,
            customer_key VARCHAR(50),
            product_category VARCHAR(50),
            quantity_sold INTEGER,
            invoice_date DATE,
            total_price DECIMAL(10, 2),
            mall_name VARCHAR(100)
        );
        """

        with duckdb.connect(DB_FILE) as duck:
            duck.execute(tables_query)

        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü:", e)

def read_xl(sheet_name, columns_dict):
    """–ß–∏—Ç–∞–µ—Ç –ª–∏—Å—Ç –∏–∑ Excel –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç –∫–æ–ª–æ–Ω–∫–∏."""
    try:
        temp_df = pd.read_excel(
            EXCEL_FILE,
            sheet_name=sheet_name,
            usecols=columns_dict.keys()
        ).rename(columns=columns_dict)

        if temp_df.empty:
            print(f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –õ–∏—Å—Ç {sheet_name} –ø—É—Å—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
            return temp_df

        # ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç –≤ sales_data
        if sheet_name == 'sales_data' and 'invoice_date' in temp_df.columns:
            try:
                temp_df['invoice_date'] = pd.to_datetime(
                    temp_df['invoice_date'],
                    format="%m/%d/%Y",
                    errors='coerce'
                )
                before = len(temp_df)
                temp_df = temp_df.dropna(subset=['invoice_date'])
                removed = before - len(temp_df)
                if removed > 0:
                    print(f"üßπ –£–¥–∞–ª–µ–Ω–æ {removed} —Å—Ç—Ä–æ–∫ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º invoice_date.")
            except Exception as date_err:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç: {date_err}")

        # ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º –≤–æ–∑—Ä–∞—Å—Ç–æ–º –≤ customer_data
        if sheet_name == 'customer_data' and 'customer_age' in temp_df.columns:
            original_len = len(temp_df)
            temp_df = temp_df.dropna(subset=['customer_age'])
            removed = original_len - len(temp_df)
            if removed > 0:
                print(f"üßπ –£–¥–∞–ª–µ–Ω–æ {removed} —Å—Ç—Ä–æ–∫ —Å –ø—É—Å—Ç—ã–º customer_age.")

        return temp_df

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Excel-–ª–∏—Å—Ç–∞ {sheet_name}: {e}")
        return None

def insert_to_db(temp_df, tbl_name):
    """–í—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É DuckDB."""
    if temp_df is None or temp_df.empty:
        print(f"‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –¥–ª—è {tbl_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å—Ç–∞–≤–∫—É.")
        return

    try:
        with duckdb.connect(DB_FILE) as duck:
            duck.register('temp_df', temp_df)
            duck.execute(f"""
                INSERT INTO {tbl_name}
                SELECT * FROM temp_df
            """)
            duck.unregister('temp_df')
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ {tbl_name}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤ {tbl_name}: {e}")

def xl_etl(sheet_name, columns_dict, tbl_name):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel –≤ —Ç–∞–±–ª–∏—Ü—É."""
    print(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ {tbl_name}...")
    temp_df = read_xl(sheet_name, columns_dict)
    insert_to_db(temp_df, tbl_name)

def create_n_insert():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö."""
    try:
        print('üîé –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã sales_data...')
        with duckdb.connect(DB_FILE) as duck:
            duck.execute("SELECT 1 FROM sales_data").fetchone()
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ.")
    except:
        print("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞—ë–º –∑–∞–Ω–æ–≤–æ...")
        create_tables()

        for sheet_name, table_info in tables_dict.items():
            xl_etl(sheet_name, table_info["columns"], table_info["table_name"])

        print("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")

create_n_insert()